{"version":3,"file":"static/webpack/static/development/pages/index.js.d9760f6d9cc2f1f206cb.hot-update.js","sources":["webpack:///./src/components/HomePageContent/DropZoneSection.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport CertificateDropzone from \"../CertificateDropZone\";\nimport css from \"./dropZoneSection.scss\";\nimport { updateCertificate } from \"../../reducers/certificate\";\nimport { trace } from \"../../utils/logger\";\nimport { IS_MAINNET } from \"../../config\";\nimport MAIN from \"./Main-Demo\";\nimport ROPSTEN from \"./Ropsten-Demo\";\nimport { analyticsEvent } from \"../Analytics/index\";\n\nconst DEMO_CERT = IS_MAINNET ? MAIN : ROPSTEN;\nconst DEMO_CONTENT_KEY = \"DEMO_CONTENT\";\n\nfunction demoCount() {\n  analyticsEvent(window, {\n    category: \"USER_INTERACTION\",\n    action: \"DEMO_CERTIFICATE_VIEWED\"\n  });\n}\n\nconst DraggableDemoCertificate = () => (\n  <div className=\"d-none d-lg-block\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <div\n          className={css.pulse}\n          draggable=\"true\"\n          onDragStart={e => e.dataTransfer.setData(DEMO_CONTENT_KEY, true)}\n          onDragEnd={demoCount}\n        >\n          <a\n            href={`data:text/plain;,${JSON.stringify(DEMO_CERT, null, 2)}`}\n            download=\"demo.opencert\"\n            rel=\"noindex nofollow\"\n          >\n            <img\n              style={{ cursor: \"grabbing\" }}\n              src=\"/static/images/dropzone/cert.png\"\n              width=\"100%\"\n            />\n          </a>\n        </div>\n      </div>\n      <div className=\"col\">\n        <img\n          src=\"/static/images/dropzone/arrow.png\"\n          width=\"100%\"\n          draggable=\"false\"\n        />\n        <span\n          style={{\n            textAlign: \"justify\",\n            color: \"#ff9933\"\n          }}\n        >\n          Drag me over here to see a demo certificate and other features\n        </span>\n        {/* <img\n          src=\"/static/images/opencertslogo.svg\"\n          width=\"100%\"\n          draggable=\"false\"\n        /> */}\n      </div>\n    </div>\n  </div>\n);\n\nconst MobileDemoCertificate = () => (\n  <div className=\"d-block d-lg-none d-xl-none\">\n    <a\n      className=\"btn btn-primary btn-lg\"\n      role=\"button\"\n      draggable=\"false\"\n      id=\"demoClick\"\n      style={{\n        background: \"#28a745\",\n        border: \"none\",\n        cursor: \"pointer\"\n      }}\n      onClick={demoCount}\n    >\n      Click me for a demo certificate!\n    </a>\n  </div>\n);\n\nclass DropZoneSection extends Component {\n  async componentDidMount() {\n\n    let API_LOCATION\n    const VER_PATH = '/'\n    const PUBLIC_ROUTE = 'public/cert'\n    \n    const url = window.location.href\n    // const certParams = url.split(VER_PATH)[1]\n    const query = url.split('?')[0]\n    \n    console.log(url)\n\n    console.log(id, network) \n    // console.log(id, network)\n    // console.log(id, network)\n\n    // If there is a cert id to look up\n    if (id) {\n      // Network IDs: 1=prod, 2=staging\n      if (network==1) {\n        API_LOCATION = 'https://certs.api.convergence.tech:3002'\n      } else if (network==2) {\n        API_LOCATION = 'http://169.48.26.238:3002'\n      } else  {\n        API_LOCATION = 'http://localhost:3002'\n      }\n\n      const API_URL = `${API_LOCATION}/${PUBLIC_ROUTE}`\n\n      try {\n        const certString = await fetch(`${API_URL}/${id}`)\n        const cert = certString ? JSON.parse((await certString.json()).cert) : null\n\n        if (cert) {\n          this.props.updateCertificate(cert);\n        }\n      } catch (err) {\n        // ...\n        console.error(err)\n      }\n    }\n\n    document.getElementById(\"demoDrop\").addEventListener(\"drop\", e => {\n      if (e.dataTransfer.getData(DEMO_CONTENT_KEY)) {\n        this.props.updateCertificate(DEMO_CERT);\n      }\n    });\n    document.getElementById(\"demoClick\").addEventListener(\"click\", () => {\n      this.props.updateCertificate(DEMO_CERT);\n    });\n  }\n\n  componentWillUnmount() {\n    document\n      .getElementById(\"demoDrop\", \"demoClick\")\n      .removeEventListener(\"drop\", () => this.removeListener());\n  }\n\n  removeListener = () => trace(\"drop listener removed\");\n\n  // eslint-disable-next-line class-methods-use-this\n  render() {\n    return (\n      <div className=\"row p-5 bg-brand-dark text-white\">\n        <div className={css.main}>\n          <div className=\"col-lg-5 col-md-12\">\n            <div className={css.description}>\n              <h1>An easy way to check and verify your certificates</h1>\n              <p>\n                Whether you&#39;re a student or an employer, Convergence lets you\n                verify the certificates you have of anyone from any institution.\n                All in one place.\n              </p>\n              <DraggableDemoCertificate />\n              <MobileDemoCertificate />\n            </div>\n          </div>\n          <div className=\"col-lg-7 col-md-12 col-sm-12\" id=\"demoDrop\">\n            <CertificateDropzone />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCertificate: payload => dispatch(updateCertificate(payload))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(DropZoneSection);\n\nDropZoneSection.propTypes = {\n  updateCertificate: PropTypes.func\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7BA;AACA;AA8CA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAkBA;;;;;;;;;;;;;;;;;;AA2DA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAxDA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AADA;AACA;AAAA;;;;;AAAA;;AAAA;AACA;;AADA;AAAA;;;;;AAAA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;;;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AApFA;AACA;AAsFA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;AAKA;AACA;AADA;;;;A","sourceRoot":""}