{"ast":null,"code":"var __jsx = React.createElement;\nimport withRedux from \"next-redux-wrapper\";\nimport App, { Container } from \"next/app\";\nimport Router from \"next/router\";\nimport withGA from \"next-ga\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport fetch from \"isomorphic-fetch\";\nimport { mapValues } from \"lodash\";\nimport initStore from \"../src/store\";\nimport { GA_ID, ENVIRONMENT } from \"../src/config\";\nimport { types } from \"../src/reducers/featureToggle\";\n\nconst FeatureFlagLoader = ({\n  dispatch,\n  children\n}) => {\n  React.useEffect(() => {\n    const run = async () => {\n      const featureToggle = await fetch(\"https://s3-ap-southeast-1.amazonaws.com/opencerts.io/feature-toggle.json\", {\n        METHOD: \"GET\"\n      }).then(response => response.json());\n      dispatch({\n        type: types.UPDATE_FEATURE_TOGGLES,\n        payload: mapValues(featureToggle, ENVIRONMENT)\n      });\n    };\n\n    run();\n  }, []);\n  return children;\n};\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Container, null, __jsx(Provider, {\n      store: store\n    }, __jsx(FeatureFlagLoader, {\n      dispatch: store.dispatch\n    }, __jsx(Component, pageProps))));\n  }\n\n}\n\nconst appWrappedWithGA = withGA(GA_ID, Router)(MyApp);\nexport default withRedux(initStore)(appWrappedWithGA);","map":null,"metadata":{},"sourceType":"module"}