{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport dynamic from \"next/dynamic\";\nimport { connect } from \"react-redux\";\nimport { getData } from \"@govtechsg/open-attestation\";\nimport Link from \"next/link\";\nimport { get, some } from \"lodash\";\nimport CertificateVerifyBlock from \"./CertificateVerifyBlock\";\nimport styles from \"./certificateViewer.scss\";\nimport Modal from \"./Modal\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport DecentralisedRenderer from \"./DecentralisedTemplateRenderer/DecentralisedRenderer\";\nimport MultiTabs from \"./MultiTabs\";\nimport { selectTemplateTab as selectTemplateTabAction } from \"../reducers/certificate\";\nimport { LEGACY_OPENCERTS_RENDERER } from \"../config\";\nimport CertificateShareLinkForm from \"./CertificateShareLink/CertificateShareLinkForm\";\nimport { FeatureFlagContainer } from \"./FeatureFlag\";\nconst CertificateSharingForm = dynamic(() => import(\"./CertificateSharing/CertificateSharingForm\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./CertificateSharing/CertificateSharingForm\")],\n    modules: [\"./CertificateSharing/CertificateSharingForm\"]\n  }\n});\n\nconst renderVerifyBlock = props => __jsx(CertificateVerifyBlock, {\n  verifyTriggered: props.verifyTriggered,\n  verifying: props.verifying,\n  hashStatus: props.hashStatus,\n  issuedStatus: props.issuedStatus,\n  notRevokedStatus: props.notRevokedStatus,\n  issuerIdentityStatus: props.issuerIdentityStatus,\n  toggleDetailedView: props.toggleDetailedView,\n  detailedVerifyVisible: props.detailedVerifyVisible\n});\n\nconst LoadingIframe = () => __jsx(\"div\", {\n  id: styles[\"renderer-loader\"],\n  className: \"text-blue\"\n}, __jsx(\"i\", {\n  className: \"fas fa-spinner fa-pulse fa-3x\"\n}), __jsx(\"div\", {\n  className: \"m-3\",\n  style: {\n    fontSize: \"1.5rem\"\n  }\n}, \"Loading Renderer...\"));\n\nconst renderHeaderBlock = props => {\n  const renderedVerifyBlock = renderVerifyBlock(props);\n  return __jsx(\"div\", {\n    className: `container-fluid ${styles[\"pd-0\"]} ${styles.container}`\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", null, renderedVerifyBlock), __jsx(\"div\", {\n    className: `row flex-nowrap`\n  }, __jsx(\"div\", {\n    className: \"ml-2\",\n    onClick: () => props.handleSharingToggle()\n  }, __jsx(\"div\", {\n    id: \"btn-email\",\n    className: styles[\"send-btn\"]\n  }, __jsx(\"i\", {\n    className: \"fas fa-envelope\",\n    style: {\n      fontSize: \"1.5rem\"\n    }\n  }))))));\n};\n\nexport const StatelessCertificateViewer = props => {\n  const {\n    document,\n    selectTemplateTab\n  } = props;\n  const certificate = getData(document);\n  const renderedHeaderBlock = renderHeaderBlock(props);\n  const identity = get(props, \"issuerIdentityStatus.identities\", []);\n  const isInRegistry = some(identity, ({\n    registry\n  }) => !!registry);\n\n  const validCertificateContent = __jsx(\"div\", null, __jsx(\"div\", {\n    id: styles[\"top-header-ui\"]\n  }, __jsx(\"div\", {\n    className: styles[\"header-container\"]\n  }, renderedHeaderBlock)), __jsx(MultiTabs, {\n    selectTemplateTab: selectTemplateTab\n  }), __jsx(\"div\", null, __jsx(LoadingIframe, null), __jsx(DecentralisedRenderer, {\n    certificate: document,\n    source: `${typeof document.data.$template === \"object\" ? certificate.$template.url : LEGACY_OPENCERTS_RENDERER}`\n  })), __jsx(Modal, {\n    show: props.showSharing,\n    toggle: props.handleSharingToggle\n  }, __jsx(CertificateSharingForm, {\n    emailSendingState: props.emailSendingState,\n    handleSendCertificate: props.handleSendCertificate,\n    handleSharingToggle: props.handleSharingToggle\n  })), __jsx(Modal, {\n    show: props.showShareLink,\n    toggle: props.handleShareLinkToggle\n  }, __jsx(CertificateShareLinkForm, {\n    shareLink: props.shareLink,\n    copiedLink: props.copiedLink,\n    handleShareLinkToggle: props.handleShareLinkToggle,\n    handleCopyLink: props.handleCopyLink\n  })));\n\n  return __jsx(ErrorBoundary, null, validCertificateContent, \" \");\n};\n\nconst mapDispatchToProps = dispatch => ({\n  selectTemplateTab: tabIndex => dispatch(selectTemplateTabAction(tabIndex))\n});\n\nexport default connect(null, mapDispatchToProps)(StatelessCertificateViewer);","map":null,"metadata":{},"sourceType":"module"}