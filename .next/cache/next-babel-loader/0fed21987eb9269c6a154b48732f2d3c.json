{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ajl/development/ssi/trybe.id/trybe.verification/src/components/CertificateDropZone/CertificateDropZoneContainer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Router from \"next/router\";\nimport Dropzone from \"react-dropzone\";\nimport { connect } from \"react-redux\";\nimport { updateCertificate as _updateCertificate, getCertificate, getVerifying, getIssuerIdentityStatus, getHashStatus, getIssuedStatus, getNotRevokedStatus, getVerificationStatus, resetCertificateState, getEncryptedCertificateStatus, getStoreStatus } from \"../../reducers/certificate\";\nimport { updateNetworkId as _updateNetworkId } from \"../../reducers/application\";\nimport CertificateVerificationStatus from \"./CertificateVerificationStatus\";\n\nvar onFileDrop = function onFileDrop(acceptedFiles, handleCertificateChange, handleFileError) {\n  // eslint-disable-next-line no-undef\n  var reader = new FileReader();\n\n  if (reader.error) {\n    handleFileError(reader.error);\n  }\n\n  reader.onload = function () {\n    try {\n      var json = JSON.parse(reader.result);\n      handleCertificateChange(json);\n    } catch (e) {\n      handleFileError(e);\n    }\n  };\n\n  if (acceptedFiles && acceptedFiles.length && acceptedFiles.length > 0) acceptedFiles.map(function (f) {\n    return reader.readAsText(f);\n  });\n};\n\nvar CertificateDropZoneContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CertificateDropZoneContainer, _Component);\n\n  function CertificateDropZoneContainer(props) {\n    var _this;\n\n    _classCallCheck(this, CertificateDropZoneContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CertificateDropZoneContainer).call(this, props));\n    _this.state = {\n      fileError: false\n    };\n    _this.handleCertificateChange = _this.handleCertificateChange.bind(_assertThisInitialized(_this));\n    _this.handleFileError = _this.handleFileError.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CertificateDropZoneContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.updateNetworkId();\n      Router.prefetch(\"/viewer\");\n    }\n  }, {\n    key: \"handleCertificateChange\",\n    value: function handleCertificateChange(certificate) {\n      this.setState({\n        fileError: false\n      });\n      this.props.updateCertificate(certificate);\n    }\n  }, {\n    key: \"handleFileError\",\n    value: function handleFileError() {\n      this.setState({\n        fileError: true\n      });\n    }\n  }, {\n    key: \"resetData\",\n    value: function resetData() {\n      this.props.resetData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Dropzone, {\n        id: \"certificate-dropzone\",\n        onDrop: function onDrop(acceptedFiles) {\n          return onFileDrop(acceptedFiles, _this2.handleCertificateChange, _this2.handleFileError);\n        },\n        className: \"h-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, function (props) {\n        return __jsx(CertificateVerificationStatus, {\n          document: _this2.props.document,\n          retrieveCertificateStatus: _this2.props.encryptedCertificateStatus,\n          fileError: _this2.state.fileError,\n          handleCertificateChange: _this2.handleCertificateChange,\n          handleFileError: _this2.handleFileError,\n          verifying: _this2.props.verifying,\n          issuerIdentityStatus: _this2.props.issuerIdentityStatus,\n          hashStatus: _this2.props.hashStatus,\n          issuedStatus: _this2.props.issuedStatus,\n          notRevokedStatus: _this2.props.notRevokedStatus,\n          verificationStatus: _this2.props.verificationStatus,\n          resetData: _this2.resetData.bind(_this2),\n          storeStatus: _this2.props.storeStatus,\n          hover: props.isDragAccept,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n      });\n    }\n  }]);\n\n  return CertificateDropZoneContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    document: getCertificate(store),\n    // Verification statuses used in verifier block\n    encryptedCertificateStatus: getEncryptedCertificateStatus(store),\n    verifying: getVerifying(store),\n    issuerIdentityStatus: getIssuerIdentityStatus(store),\n    hashStatus: getHashStatus(store),\n    issuedStatus: getIssuedStatus(store),\n    notRevokedStatus: getNotRevokedStatus(store),\n    verificationStatus: getVerificationStatus(store),\n    storeStatus: getStoreStatus(store)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateNetworkId: function updateNetworkId() {\n      return dispatch(_updateNetworkId());\n    },\n    updateCertificate: function updateCertificate(payload) {\n      return dispatch(_updateCertificate(payload));\n    },\n    resetData: function resetData() {\n      return dispatch(resetCertificateState());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CertificateDropZoneContainer);\nCertificateDropZoneContainer.propTypes = {\n  updateNetworkId: PropTypes.func,\n  document: PropTypes.object,\n  encryptedCertificateStatus: PropTypes.string,\n  handleCertificateChange: PropTypes.func,\n  updateCertificate: PropTypes.func,\n  resetData: PropTypes.func,\n  verifying: PropTypes.bool,\n  issuerIdentityStatus: PropTypes.object,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  verificationStatus: PropTypes.array,\n  storeStatus: PropTypes.object\n};","map":{"version":3,"sources":["/home/ajl/development/ssi/trybe.id/trybe.verification/src/components/CertificateDropZone/CertificateDropZoneContainer.js"],"names":["React","Component","PropTypes","Router","Dropzone","connect","updateCertificate","getCertificate","getVerifying","getIssuerIdentityStatus","getHashStatus","getIssuedStatus","getNotRevokedStatus","getVerificationStatus","resetCertificateState","getEncryptedCertificateStatus","getStoreStatus","updateNetworkId","CertificateVerificationStatus","onFileDrop","acceptedFiles","handleCertificateChange","handleFileError","reader","FileReader","error","onload","json","JSON","parse","result","e","length","map","f","readAsText","CertificateDropZoneContainer","props","state","fileError","bind","prefetch","certificate","setState","resetData","document","encryptedCertificateStatus","verifying","issuerIdentityStatus","hashStatus","issuedStatus","notRevokedStatus","verificationStatus","storeStatus","isDragAccept","mapStateToProps","store","mapDispatchToProps","dispatch","payload","propTypes","func","object","string","bool","array"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Router from \"next/router\";\nimport Dropzone from \"react-dropzone\";\nimport { connect } from \"react-redux\";\nimport {\n  updateCertificate,\n  getCertificate,\n  getVerifying,\n  getIssuerIdentityStatus,\n  getHashStatus,\n  getIssuedStatus,\n  getNotRevokedStatus,\n  getVerificationStatus,\n  resetCertificateState,\n  getEncryptedCertificateStatus,\n  getStoreStatus\n} from \"../../reducers/certificate\";\nimport { updateNetworkId } from \"../../reducers/application\";\nimport CertificateVerificationStatus from \"./CertificateVerificationStatus\";\n\nconst onFileDrop = (\n  acceptedFiles,\n  handleCertificateChange,\n  handleFileError\n) => {\n  // eslint-disable-next-line no-undef\n  const reader = new FileReader();\n  if (reader.error) {\n    handleFileError(reader.error);\n  }\n  reader.onload = () => {\n    try {\n      const json = JSON.parse(reader.result);\n      handleCertificateChange(json);\n    } catch (e) {\n      handleFileError(e);\n    }\n  };\n  if (acceptedFiles && acceptedFiles.length && acceptedFiles.length > 0)\n    acceptedFiles.map(f => reader.readAsText(f));\n};\nclass CertificateDropZoneContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fileError: false\n    };\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleFileError = this.handleFileError.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.updateNetworkId();\n    Router.prefetch(\"/viewer\");\n  }\n\n  handleCertificateChange(certificate) {\n    this.setState({ fileError: false });\n    this.props.updateCertificate(certificate);\n  }\n\n  handleFileError() {\n    this.setState({ fileError: true });\n  }\n\n  resetData() {\n    this.props.resetData();\n  }\n\n  render() {\n    return (\n      <Dropzone\n        id=\"certificate-dropzone\"\n        onDrop={acceptedFiles =>\n          onFileDrop(\n            acceptedFiles,\n            this.handleCertificateChange,\n            this.handleFileError\n          )\n        }\n        className=\"h-100\"\n      >\n        {props => (\n          <CertificateVerificationStatus\n            document={this.props.document}\n            retrieveCertificateStatus={this.props.encryptedCertificateStatus}\n            fileError={this.state.fileError}\n            handleCertificateChange={this.handleCertificateChange}\n            handleFileError={this.handleFileError}\n            verifying={this.props.verifying}\n            issuerIdentityStatus={this.props.issuerIdentityStatus}\n            hashStatus={this.props.hashStatus}\n            issuedStatus={this.props.issuedStatus}\n            notRevokedStatus={this.props.notRevokedStatus}\n            verificationStatus={this.props.verificationStatus}\n            resetData={this.resetData.bind(this)}\n            storeStatus={this.props.storeStatus}\n            hover={props.isDragAccept}\n          />\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n\n  // Verification statuses used in verifier block\n  encryptedCertificateStatus: getEncryptedCertificateStatus(store),\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n  verificationStatus: getVerificationStatus(store),\n  storeStatus: getStoreStatus(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateNetworkId: () => dispatch(updateNetworkId()),\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  resetData: () => dispatch(resetCertificateState())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CertificateDropZoneContainer);\n\nCertificateDropZoneContainer.propTypes = {\n  updateNetworkId: PropTypes.func,\n  document: PropTypes.object,\n  encryptedCertificateStatus: PropTypes.string,\n  handleCertificateChange: PropTypes.func,\n  updateCertificate: PropTypes.func,\n  resetData: PropTypes.func,\n  verifying: PropTypes.bool,\n  issuerIdentityStatus: PropTypes.object,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  verificationStatus: PropTypes.array,\n  storeStatus: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}