{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CertificateDropzone from \"../CertificateDropZone\";\nimport css from \"./dropZoneSection.scss\";\nimport { updateCertificate as _updateCertificate } from \"../../reducers/certificate\";\n\nvar DropZoneSection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropZoneSection, _Component);\n\n  function DropZoneSection() {\n    _classCallCheck(this, DropZoneSection);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DropZoneSection).apply(this, arguments));\n  }\n\n  _createClass(DropZoneSection, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var API_LOCATION, VER_PATH, PUBLIC_ROUTE, url, certParams, _certParams$split, _certParams$split2, id, network, API_URL, certString, cert;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                VER_PATH = '/c/';\n                PUBLIC_ROUTE = 'public/cert';\n                url = window.location.href;\n                certParams = url.split(VER_PATH)[1];\n                _certParams$split = certParams.split('?'), _certParams$split2 = _slicedToArray(_certParams$split, 2), id = _certParams$split2[0], network = _certParams$split2[1]; // If there is a cert id to look up\n\n                if (!id) {\n                  _context.next = 28;\n                  break;\n                }\n\n                // Network IDs: 1=prod, 2=staging\n                if (network == 1) {\n                  API_LOCATION = 'https://certs.api.convergence.tech:3002';\n                } else if (network == 2) {\n                  API_LOCATION = 'http://169.48.26.238:3002';\n                } else {\n                  API_LOCATION = 'http://localhost:3002';\n                }\n\n                API_URL = \"\".concat(API_LOCATION, \"/\").concat(PUBLIC_ROUTE);\n                _context.prev = 8;\n                _context.next = 11;\n                return fetch(\"\".concat(API_URL, \"/\").concat(id));\n\n              case 11:\n                certString = _context.sent;\n\n                if (!certString) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.t1 = JSON;\n                _context.next = 16;\n                return certString.json();\n\n              case 16:\n                _context.t2 = _context.sent.cert;\n                _context.t0 = _context.t1.parse.call(_context.t1, _context.t2);\n                _context.next = 21;\n                break;\n\n              case 20:\n                _context.t0 = null;\n\n              case 21:\n                cert = _context.t0;\n\n                if (cert) {\n                  this.props.updateCertificate(cert);\n                }\n\n                _context.next = 28;\n                break;\n\n              case 25:\n                _context.prev = 25;\n                _context.t3 = _context[\"catch\"](8);\n                // ...\n                console.error(_context.t3);\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[8, 25]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        className: \"row p-5 bg-brand-dark text-white\"\n      }, __jsx(\"div\", {\n        className: css.main\n      }, __jsx(CertificateDropzone, null)));\n    }\n  }]);\n\n  return DropZoneSection;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateCertificate: function updateCertificate(payload) {\n      return dispatch(_updateCertificate(payload));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(DropZoneSection);","map":null,"metadata":{},"sourceType":"module"}