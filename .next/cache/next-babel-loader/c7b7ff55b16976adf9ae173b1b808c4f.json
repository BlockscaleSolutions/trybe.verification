{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ajl/development/ssi/trybe.id/trybe.verification/src/components/ViewerPageContainer.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport copy from \"clipboard-copy\";\nimport { getData } from \"@govtechsg/open-attestation\";\nimport { updateCertificate as _updateCertificate, sendCertificate as _sendCertificate, sendCertificateReset as _sendCertificateReset, generateShareLink as _generateShareLink, getCertificate, getVerifying, getIssuerIdentityStatus, getHashStatus, getIssuedStatus, getNotRevokedStatus, getVerified, getEmailSendingState, getShareLink, getShareLinkState, updateObfuscatedCertificate as _updateObfuscatedCertificate } from \"../reducers/certificate\";\nimport CertificateViewer from \"./CertificateViewer\";\n\nvar MainPageContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainPageContainer, _Component);\n\n  function MainPageContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MainPageContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainPageContainer).call(this, props));\n    _this.state = {\n      showSharing: false,\n      detailedVerifyVisible: false,\n      copiedLink: false\n    };\n    _this.toggleDetailedView = _this.toggleDetailedView.bind(_assertThisInitialized(_this));\n    _this.handleCertificateChange = _this.handleCertificateChange.bind(_assertThisInitialized(_this));\n    _this.handleSharingToggle = _this.handleSharingToggle.bind(_assertThisInitialized(_this));\n    _this.handleShareLinkToggle = _this.handleShareLinkToggle.bind(_assertThisInitialized(_this));\n    _this.handleSendCertificate = _this.handleSendCertificate.bind(_assertThisInitialized(_this));\n    _this.handleCopyLink = _this.handleCopyLink.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MainPageContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var document = this.props.document;\n\n      if (!document) {\n        Router.replace(\"/\");\n      }\n    }\n  }, {\n    key: \"handleSharingToggle\",\n    value: function handleSharingToggle() {\n      this.props.sendCertificateReset();\n      this.setState({\n        showSharing: !this.state.showSharing\n      });\n    }\n  }, {\n    key: \"handleShareLinkToggle\",\n    value: function handleShareLinkToggle() {\n      if (!this.state.showShareLink) {\n        this.props.generateShareLink();\n      }\n\n      this.setState({\n        showShareLink: !this.state.showShareLink,\n        copiedLink: false\n      });\n    }\n  }, {\n    key: \"handleCopyLink\",\n    value: function handleCopyLink(certificateLink) {\n      copy(certificateLink);\n      this.setState({\n        copiedLink: true\n      });\n    }\n  }, {\n    key: \"toggleDetailedView\",\n    value: function toggleDetailedView() {\n      this.setState({\n        detailedVerifyVisible: !this.state.detailedVerifyVisible\n      });\n    }\n  }, {\n    key: \"handleCertificateChange\",\n    value: function handleCertificateChange(certificate) {\n      this.props.updateCertificate(certificate);\n    }\n  }, {\n    key: \"handleSendCertificate\",\n    value: function handleSendCertificate(_ref) {\n      var email = _ref.email,\n          captcha = _ref.captcha;\n      this.props.sendCertificate({\n        email: email,\n        captcha: captcha\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.document) return null;\n      return __jsx(CertificateViewer, {\n        document: this.props.document,\n        certificate: getData(this.props.document),\n        verifying: this.props.verifying,\n        hashStatus: this.props.hashStatus,\n        issuedStatus: this.props.issuedStatus,\n        notRevokedStatus: this.props.notRevokedStatus,\n        issuerIdentityStatus: this.props.issuerIdentityStatus,\n        handleCertificateChange: this.handleCertificateChange,\n        showSharing: this.state.showSharing,\n        showShareLink: this.state.showShareLink,\n        shareLink: this.props.shareLink,\n        handleSendCertificate: this.handleSendCertificate,\n        handleSharingToggle: this.handleSharingToggle,\n        handleShareLinkToggle: this.handleShareLinkToggle,\n        handleCopyLink: this.handleCopyLink,\n        copiedLink: this.state.copiedLink,\n        emailSendingState: this.props.emailSendingState,\n        toggleDetailedView: this.toggleDetailedView,\n        detailedVerifyVisible: this.state.detailedVerifyVisible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MainPageContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    document: getCertificate(store),\n    // Verification statuses used in verifier block\n    emailSendingState: getEmailSendingState(store),\n    shareLink: getShareLink(store),\n    shareLinkState: getShareLinkState(store),\n    verifying: getVerifying(store),\n    issuerIdentityStatus: getIssuerIdentityStatus(store),\n    hashStatus: getHashStatus(store),\n    issuedStatus: getIssuedStatus(store),\n    notRevokedStatus: getNotRevokedStatus(store),\n    verified: getVerified(store)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateCertificate: function updateCertificate(payload) {\n      return dispatch(_updateCertificate(payload));\n    },\n    sendCertificate: function sendCertificate(payload) {\n      return dispatch(_sendCertificate(payload));\n    },\n    sendCertificateReset: function sendCertificateReset() {\n      return dispatch(_sendCertificateReset());\n    },\n    generateShareLink: function generateShareLink() {\n      return dispatch(_generateShareLink());\n    },\n    updateObfuscatedCertificate: function updateObfuscatedCertificate(updatedDoc) {\n      return dispatch(_updateObfuscatedCertificate(updatedDoc));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPageContainer);\nMainPageContainer.propTypes = {\n  updateCertificate: PropTypes.func,\n  document: PropTypes.object,\n  certificate: PropTypes.object,\n  verifying: PropTypes.bool,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  verified: PropTypes.bool,\n  emailSendingState: PropTypes.string,\n  sendCertificate: PropTypes.func,\n  sendCertificateReset: PropTypes.func,\n  generateShareLink: PropTypes.func,\n  shareLink: PropTypes.object,\n  updateObfuscatedCertificate: PropTypes.func\n};","map":{"version":3,"sources":["/home/ajl/development/ssi/trybe.id/trybe.verification/src/components/ViewerPageContainer.js"],"names":["React","Component","PropTypes","connect","Router","copy","getData","updateCertificate","sendCertificate","sendCertificateReset","generateShareLink","getCertificate","getVerifying","getIssuerIdentityStatus","getHashStatus","getIssuedStatus","getNotRevokedStatus","getVerified","getEmailSendingState","getShareLink","getShareLinkState","updateObfuscatedCertificate","CertificateViewer","MainPageContainer","props","state","showSharing","detailedVerifyVisible","copiedLink","toggleDetailedView","bind","handleCertificateChange","handleSharingToggle","handleShareLinkToggle","handleSendCertificate","handleCopyLink","document","replace","setState","showShareLink","certificateLink","certificate","email","captcha","verifying","hashStatus","issuedStatus","notRevokedStatus","issuerIdentityStatus","shareLink","emailSendingState","mapStateToProps","store","shareLinkState","verified","mapDispatchToProps","dispatch","payload","updatedDoc","propTypes","func","object","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport copy from \"clipboard-copy\";\nimport { getData } from \"@govtechsg/open-attestation\";\n\nimport {\n  updateCertificate,\n  sendCertificate,\n  sendCertificateReset,\n  generateShareLink,\n  getCertificate,\n  getVerifying,\n  getIssuerIdentityStatus,\n  getHashStatus,\n  getIssuedStatus,\n  getNotRevokedStatus,\n  getVerified,\n  getEmailSendingState,\n  getShareLink,\n  getShareLinkState,\n  updateObfuscatedCertificate\n} from \"../reducers/certificate\";\nimport CertificateViewer from \"./CertificateViewer\";\n\nclass MainPageContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showSharing: false,\n      detailedVerifyVisible: false,\n      copiedLink: false\n    };\n    this.toggleDetailedView = this.toggleDetailedView.bind(this);\n    this.handleCertificateChange = this.handleCertificateChange.bind(this);\n    this.handleSharingToggle = this.handleSharingToggle.bind(this);\n    this.handleShareLinkToggle = this.handleShareLinkToggle.bind(this);\n    this.handleSendCertificate = this.handleSendCertificate.bind(this);\n    this.handleCopyLink = this.handleCopyLink.bind(this);\n  }\n\n  componentDidMount() {\n    const { document } = this.props;\n    if (!document) {\n      Router.replace(\"/\");\n    }\n  }\n\n  handleSharingToggle() {\n    this.props.sendCertificateReset();\n    this.setState({ showSharing: !this.state.showSharing });\n  }\n\n  handleShareLinkToggle() {\n    if (!this.state.showShareLink) {\n      this.props.generateShareLink();\n    }\n    this.setState({\n      showShareLink: !this.state.showShareLink,\n      copiedLink: false\n    });\n  }\n\n  handleCopyLink(certificateLink) {\n    copy(certificateLink);\n    this.setState({ copiedLink: true });\n  }\n\n  toggleDetailedView() {\n    this.setState({\n      detailedVerifyVisible: !this.state.detailedVerifyVisible\n    });\n  }\n\n  handleCertificateChange(certificate) {\n    this.props.updateCertificate(certificate);\n  }\n\n  handleSendCertificate({ email, captcha }) {\n    this.props.sendCertificate({ email, captcha });\n  }\n\n  render() {\n    if (!this.props.document) return null;\n    return (\n      <CertificateViewer\n        document={this.props.document}\n        certificate={getData(this.props.document)}\n        verifying={this.props.verifying}\n        hashStatus={this.props.hashStatus}\n        issuedStatus={this.props.issuedStatus}\n        notRevokedStatus={this.props.notRevokedStatus}\n        issuerIdentityStatus={this.props.issuerIdentityStatus}\n        handleCertificateChange={this.handleCertificateChange}\n        showSharing={this.state.showSharing}\n        showShareLink={this.state.showShareLink}\n        shareLink={this.props.shareLink}\n        handleSendCertificate={this.handleSendCertificate}\n        handleSharingToggle={this.handleSharingToggle}\n        handleShareLinkToggle={this.handleShareLinkToggle}\n        handleCopyLink={this.handleCopyLink}\n        copiedLink={this.state.copiedLink}\n        emailSendingState={this.props.emailSendingState}\n        toggleDetailedView={this.toggleDetailedView}\n        detailedVerifyVisible={this.state.detailedVerifyVisible}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = store => ({\n  document: getCertificate(store),\n\n  // Verification statuses used in verifier block\n  emailSendingState: getEmailSendingState(store),\n  shareLink: getShareLink(store),\n  shareLinkState: getShareLinkState(store),\n  verifying: getVerifying(store),\n  issuerIdentityStatus: getIssuerIdentityStatus(store),\n  hashStatus: getHashStatus(store),\n  issuedStatus: getIssuedStatus(store),\n  notRevokedStatus: getNotRevokedStatus(store),\n  verified: getVerified(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateCertificate: payload => dispatch(updateCertificate(payload)),\n  sendCertificate: payload => dispatch(sendCertificate(payload)),\n  sendCertificateReset: () => dispatch(sendCertificateReset()),\n  generateShareLink: () => dispatch(generateShareLink()),\n  updateObfuscatedCertificate: updatedDoc =>\n    dispatch(updateObfuscatedCertificate(updatedDoc))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainPageContainer);\n\nMainPageContainer.propTypes = {\n  updateCertificate: PropTypes.func,\n  document: PropTypes.object,\n  certificate: PropTypes.object,\n  verifying: PropTypes.bool,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  verified: PropTypes.bool,\n  emailSendingState: PropTypes.string,\n  sendCertificate: PropTypes.func,\n  sendCertificateReset: PropTypes.func,\n  generateShareLink: PropTypes.func,\n  shareLink: PropTypes.object,\n  updateObfuscatedCertificate: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}