{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/home/ajl/development/ssi/trybe.id/trybe.verification/src/components/CertificateVerifyBlock/CertificateVerifyBlock.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport PropTypes from \"prop-types\";\nimport { get, find, sortBy } from \"lodash\";\nimport DetailedCertificateVerifyBlock from \"./DetailedCertificateVerifyBlock\";\nimport { LOG_LEVEL } from \"./constants\";\nimport css from \"./certificateVerifyBlock.scss\";\nimport icons from \"../ViewerPageImages\";\n\nconst statusSummary = ({\n  verifying,\n  hashStatus,\n  issuedStatus,\n  notRevokedStatus,\n  issuerIdentityStatus\n}) => {\n  if (verifying) return LOG_LEVEL.VERIFYING;\n  if (!verifying && hashStatus.verified && issuedStatus.verified && notRevokedStatus.verified && issuerIdentityStatus.verified) return LOG_LEVEL.VALID;\n  if (!verifying && hashStatus.verified && issuedStatus.verified && notRevokedStatus.verified && !issuerIdentityStatus.verified) return LOG_LEVEL.WARNING;\n  return LOG_LEVEL.INVALID;\n};\n\nconst renderIcon = status => {\n  let icon;\n\n  switch (status) {\n    case LOG_LEVEL.CONNECTING:\n    case LOG_LEVEL.VERIFYING:\n      icon = __jsx(\"i\", {\n        id: \"verify-spinner\",\n        className: \"fa fa-spinner fa-spin fa-2x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n      break;\n\n    case LOG_LEVEL.VALID:\n      icon = icons.checkCircle();\n      break;\n\n    case LOG_LEVEL.WARNING:\n      icon = __jsx(\"i\", {\n        id: \"verify-warning\",\n        className: \"fas fa-exclamation-triangle fa-2x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n      break;\n\n    default:\n      icon = __jsx(\"i\", {\n        id: \"verify-invalid\",\n        className: \"fas fa-times-circle fa-2x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n  }\n\n  return __jsx(\"div\", {\n    className: `d-flex justify-content-center align-items-center ${css[\"verified-icon\"]}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, icon);\n};\n\nexport const getIdentityVerificationText = identityStatus => {\n  const identity = find(identityStatus, ({\n    registry\n  }) => !!registry);\n\n  if (identity) {\n    return `Certificate issued by ${identity.registry.toUpperCase()}`;\n  } // note filter Boolean is to remove empty values\n\n\n  const dnsNames = sortBy(identityStatus, [\"dns\"]).map(({\n    dns\n  }) => dns ? dns.toUpperCase() : null).filter(Boolean);\n  return `Certificate issued by ${dnsNames.length > 0 ? dnsNames[0].toUpperCase() : \"Unknown\"}`;\n};\n\nconst renderText = (status, props) => {\n  let text;\n\n  switch (status) {\n    case LOG_LEVEL.CONNECTING:\n      text = \"Connecting ...\";\n      break;\n\n    case LOG_LEVEL.VERIFYING:\n      text = \"Verifying Certificate ...\";\n      break;\n\n    case LOG_LEVEL.VALID:\n      {\n        const identity = get(props, \"issuerIdentityStatus.identities\", []);\n        text = getIdentityVerificationText(identity);\n        break;\n      }\n\n    case LOG_LEVEL.WARNING:\n      text = \"Institution identity not verified\";\n      break;\n\n    default:\n      text = \"Invalid Certificate\";\n  }\n\n  return __jsx(\"div\", {\n    className: css[\"verification-text\"],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, text);\n};\n\nconst SimpleVerifyBlock = props => {\n  const status = statusSummary(props);\n  const renderedIcon = renderIcon(status);\n  const renderedText = renderText(status, props);\n  let stateStyle;\n\n  switch (status) {\n    case LOG_LEVEL.VALID:\n      stateStyle = \"valid\";\n      break;\n\n    case LOG_LEVEL.WARNING:\n      stateStyle = \"warning\";\n      break;\n\n    case LOG_LEVEL.INVALID:\n    default:\n      stateStyle = \"invalid\";\n  }\n\n  return __jsx(\"div\", {\n    className: `p-2 pointer ${css[\"simple-verify-block\"]} ${css[stateStyle]} ${props.detailedVerifyVisible ? css.active : \"\"}`,\n    onClick: props.toggleDetailedView,\n    id: \"certificate-status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"row justify-center\",\n    style: {\n      flexWrap: \"inherit\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, renderedIcon, renderedText, __jsx(\"span\", {\n    // eslint-disable-next-line prettier/prettier\n    className: `d-flex justify-content-center align-items-center ${css.arrow}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, icons.arrow())));\n};\n\nconst CertificateVerifyBlock = props => {\n  const status = statusSummary(props);\n  return __jsx(\"div\", {\n    id: \"certificate-verify-block\",\n    className: `align-items-start flex-nowrap ${css[\"d-flex\"]} ${css.verifyBlocksContainer} mb-md-0`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, __jsx(SimpleVerifyBlock, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  })), props.detailedVerifyVisible ? __jsx(DetailedCertificateVerifyBlock, {\n    statusSummary: status,\n    hashStatus: props.hashStatus,\n    issuedStatus: props.issuedStatus,\n    notRevokedStatus: props.notRevokedStatus,\n    issuerIdentityStatus: props.issuerIdentityStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }) : \"\");\n};\n\nCertificateVerifyBlock.propTypes = {\n  verifyTriggered: PropTypes.bool,\n  verifying: PropTypes.bool,\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  toggleDetailedView: PropTypes.func,\n  detailedVerifyVisible: PropTypes.bool\n};\nSimpleVerifyBlock.propTypes = CertificateVerifyBlock.propTypes;\nexport default CertificateVerifyBlock;","map":{"version":3,"sources":["/home/ajl/development/ssi/trybe.id/trybe.verification/src/components/CertificateVerifyBlock/CertificateVerifyBlock.js"],"names":["PropTypes","get","find","sortBy","DetailedCertificateVerifyBlock","LOG_LEVEL","css","icons","statusSummary","verifying","hashStatus","issuedStatus","notRevokedStatus","issuerIdentityStatus","VERIFYING","verified","VALID","WARNING","INVALID","renderIcon","status","icon","CONNECTING","checkCircle","getIdentityVerificationText","identityStatus","identity","registry","toUpperCase","dnsNames","map","dns","filter","Boolean","length","renderText","props","text","SimpleVerifyBlock","renderedIcon","renderedText","stateStyle","detailedVerifyVisible","active","toggleDetailedView","flexWrap","arrow","CertificateVerifyBlock","verifyBlocksContainer","propTypes","verifyTriggered","bool","object","func"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport { get, find, sortBy } from \"lodash\";\nimport DetailedCertificateVerifyBlock from \"./DetailedCertificateVerifyBlock\";\nimport { LOG_LEVEL } from \"./constants\";\nimport css from \"./certificateVerifyBlock.scss\";\nimport icons from \"../ViewerPageImages\";\n\nconst statusSummary = ({\n  verifying,\n  hashStatus,\n  issuedStatus,\n  notRevokedStatus,\n  issuerIdentityStatus\n}) => {\n  if (verifying) return LOG_LEVEL.VERIFYING;\n  if (\n    !verifying &&\n    hashStatus.verified &&\n    issuedStatus.verified &&\n    notRevokedStatus.verified &&\n    issuerIdentityStatus.verified\n  )\n    return LOG_LEVEL.VALID;\n  if (\n    !verifying &&\n    hashStatus.verified &&\n    issuedStatus.verified &&\n    notRevokedStatus.verified &&\n    !issuerIdentityStatus.verified\n  )\n    return LOG_LEVEL.WARNING;\n  return LOG_LEVEL.INVALID;\n};\n\nconst renderIcon = status => {\n  let icon;\n  switch (status) {\n    case LOG_LEVEL.CONNECTING:\n    case LOG_LEVEL.VERIFYING:\n      icon = <i id=\"verify-spinner\" className=\"fa fa-spinner fa-spin fa-2x\" />;\n      break;\n    case LOG_LEVEL.VALID:\n      icon = icons.checkCircle();\n      break;\n    case LOG_LEVEL.WARNING:\n      icon = (\n        <i id=\"verify-warning\" className=\"fas fa-exclamation-triangle fa-2x\" />\n      );\n      break;\n    default:\n      icon = <i id=\"verify-invalid\" className=\"fas fa-times-circle fa-2x\" />;\n  }\n  return (\n    <div\n      className={`d-flex justify-content-center align-items-center ${\n        css[\"verified-icon\"]\n      }`}\n    >\n      {icon}\n    </div>\n  );\n};\n\nexport const getIdentityVerificationText = identityStatus => {\n  const identity = find(identityStatus, ({ registry }) => !!registry);\n  if (identity) {\n    return `Certificate issued by ${identity.registry.toUpperCase()}`;\n  }\n  // note filter Boolean is to remove empty values\n  const dnsNames = sortBy(identityStatus, [\"dns\"])\n    .map(({ dns }) => (dns ? dns.toUpperCase() : null))\n    .filter(Boolean);\n  return `Certificate issued by ${\n    dnsNames.length > 0 ? dnsNames[0].toUpperCase() : \"Unknown\"\n  }`;\n};\n\nconst renderText = (status, props) => {\n  let text;\n  switch (status) {\n    case LOG_LEVEL.CONNECTING:\n      text = \"Connecting ...\";\n      break;\n    case LOG_LEVEL.VERIFYING:\n      text = \"Verifying Certificate ...\";\n      break;\n    case LOG_LEVEL.VALID: {\n      const identity = get(props, \"issuerIdentityStatus.identities\", []);\n      text = getIdentityVerificationText(identity);\n      break;\n    }\n    case LOG_LEVEL.WARNING:\n      text = \"Institution identity not verified\";\n      break;\n    default:\n      text = \"Invalid Certificate\";\n  }\n  return <div className={css[\"verification-text\"]}>{text}</div>;\n};\n\nconst SimpleVerifyBlock = props => {\n  const status = statusSummary(props);\n  const renderedIcon = renderIcon(status);\n  const renderedText = renderText(status, props);\n\n  let stateStyle;\n  switch (status) {\n    case LOG_LEVEL.VALID:\n      stateStyle = \"valid\";\n      break;\n    case LOG_LEVEL.WARNING:\n      stateStyle = \"warning\";\n      break;\n    case LOG_LEVEL.INVALID:\n    default:\n      stateStyle = \"invalid\";\n  }\n  return (\n    <div\n      className={`p-2 pointer ${css[\"simple-verify-block\"]} ${\n        css[stateStyle]\n      } ${props.detailedVerifyVisible ? css.active : \"\"}`}\n      onClick={props.toggleDetailedView}\n      id=\"certificate-status\"\n    >\n      <div className=\"row justify-center\" style={{ flexWrap: \"inherit\" }}>\n        {renderedIcon}\n        {renderedText}\n        <span\n          // eslint-disable-next-line prettier/prettier\n          className={`d-flex justify-content-center align-items-center ${\n            css.arrow\n          }`}\n        >\n          {icons.arrow()}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst CertificateVerifyBlock = props => {\n  const status = statusSummary(props);\n  return (\n    <div\n      id=\"certificate-verify-block\"\n      className={`align-items-start flex-nowrap ${css[\"d-flex\"]} ${\n        css.verifyBlocksContainer\n      } mb-md-0`}\n    >\n      <SimpleVerifyBlock {...props} />\n      {props.detailedVerifyVisible ? (\n        <DetailedCertificateVerifyBlock\n          statusSummary={status}\n          hashStatus={props.hashStatus}\n          issuedStatus={props.issuedStatus}\n          notRevokedStatus={props.notRevokedStatus}\n          issuerIdentityStatus={props.issuerIdentityStatus}\n        />\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nCertificateVerifyBlock.propTypes = {\n  verifyTriggered: PropTypes.bool,\n  verifying: PropTypes.bool,\n\n  hashStatus: PropTypes.object,\n  issuedStatus: PropTypes.object,\n  notRevokedStatus: PropTypes.object,\n  issuerIdentityStatus: PropTypes.object,\n  toggleDetailedView: PropTypes.func,\n  detailedVerifyVisible: PropTypes.bool\n};\n\nSimpleVerifyBlock.propTypes = CertificateVerifyBlock.propTypes;\n\nexport default CertificateVerifyBlock;\n"]},"metadata":{},"sourceType":"module"}