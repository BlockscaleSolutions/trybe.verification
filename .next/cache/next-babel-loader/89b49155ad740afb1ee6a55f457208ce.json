{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport NextSeo from \"next-seo\";\nimport QueryString from \"query-string\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"next/router\";\nimport { retrieveCertificateByLink } from \"../../src/reducers/certificate\";\nimport NavigationBar from \"../../src/components/Layout/NavigationBar\";\nimport VerifierPageContainer from \"../../src/components/VerifierPageContainer\";\nimport { DEFAULT_SEO } from \"../../src/config\";\n\nconst VerifierPage = props => {\n  const getCertificate = () => {\n    const encryptionKey = window.location.hash.substring(1); // using window.location.search because react router has issue getting the query on NextJS\n\n    const documentId = QueryString.parse(window.location.search).documentId;\n\n    if (documentId) {\n      const payload = {\n        id: documentId,\n        encryptionKey\n      };\n      props.retrieveCertificateByLink(payload);\n    }\n  };\n\n  useEffect(() => {\n    getCertificate();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(NavigationBar, {\n    active: \"home\"\n  }), __jsx(VerifierPageContainer, null));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  retrieveCertificateByLink: payload => dispatch(retrieveCertificateByLink(payload))\n});\n\nexport default connect(null, mapDispatchToProps)(withRouter(VerifierPage));","map":null,"metadata":{},"sourceType":"module"}