{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport NextSeo from \"next-seo\";\nimport QueryString from \"query-string\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"next/router\";\nimport { retrieveCertificateByLink as _retrieveCertificateByLink } from \"../src/reducers/certificate\";\nimport NavigationBar from \"../src/components/Layout/NavigationBar\";\nimport FooterBar from \"../src/components/Layout/FooterBar\";\nimport MainPageContainer from \"../src/components/MainPageContainer\";\nimport { DEFAULT_SEO } from \"../src/config\";\n\nvar VerifierPage = function VerifierPage(props) {\n  var getCertificate = function getCertificate() {\n    var encryptionKey = window.location.hash.substring(1); // using window.location.search because react router has issue getting the query on NextJS\n\n    var documentId = QueryString.parse(window.location.search).documentId;\n\n    if (documentId) {\n      var payload = {\n        id: documentId,\n        encryptionKey: encryptionKey\n      };\n      props.retrieveCertificateByLink(payload);\n    }\n  };\n\n  useEffect(function () {\n    getCertificate();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(NavigationBar, {\n    active: \"home\"\n  }), __jsx(MainPageContainer, null));\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    retrieveCertificateByLink: function retrieveCertificateByLink(payload) {\n      return dispatch(_retrieveCertificateByLink(payload));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(VerifierPage));","map":null,"metadata":{},"sourceType":"module"}