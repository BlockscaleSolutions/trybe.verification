{"ast":null,"code":"var _jsxFileName = \"/home/ajl/development/ssi/trybe.id/trybe.verification/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport NextSeo from \"next-seo\";\nimport QueryString from \"query-string\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"next/router\";\nimport { retrieveCertificateByLink } from \"../src/reducers/certificate\";\nimport NavigationBar from \"../src/components/Layout/NavigationBar\";\nimport FooterBar from \"../src/components/Layout/FooterBar\";\nimport MainPageContainer from \"../src/components/MainPageContainer\";\nimport { DEFAULT_SEO } from \"../src/config\";\n\nconst VerifierPage = props => {\n  const getCertificate = () => {\n    const encryptionKey = window.location.hash.substring(1); // using window.location.search because react router has issue getting the query on NextJS\n\n    const documentId = QueryString.parse(window.location.search).documentId;\n\n    if (documentId) {\n      const payload = {\n        id: documentId,\n        encryptionKey\n      };\n      props.retrieveCertificateByLink(payload);\n    }\n  };\n\n  useEffect(() => {\n    getCertificate();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(NavigationBar, {\n    active: \"home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), __jsx(MainPageContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  retrieveCertificateByLink: payload => dispatch(retrieveCertificateByLink(payload))\n});\n\nexport default connect(null, mapDispatchToProps)(withRouter(VerifierPage));\nVerifierPage.propTypes = {\n  router: PropTypes.object,\n  documentId: PropTypes.string,\n  encryptedCertificateStatus: PropTypes.string,\n  retrieveCertificateByLink: PropTypes.func\n};","map":{"version":3,"sources":["/home/ajl/development/ssi/trybe.id/trybe.verification/pages/index.js"],"names":["React","useEffect","PropTypes","NextSeo","QueryString","connect","withRouter","retrieveCertificateByLink","NavigationBar","FooterBar","MainPageContainer","DEFAULT_SEO","VerifierPage","props","getCertificate","encryptionKey","window","location","hash","substring","documentId","parse","search","payload","id","mapDispatchToProps","dispatch","propTypes","router","object","string","encryptedCertificateStatus","func"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAMC,cAAc,GAAG,MAAM;AAC3B,UAAMC,aAAa,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,CAA/B,CAAtB,CAD2B,CAE3B;;AACA,UAAMC,UAAU,GAAGhB,WAAW,CAACiB,KAAZ,CAAkBL,MAAM,CAACC,QAAP,CAAgBK,MAAlC,EAA0CF,UAA7D;;AACA,QAAIA,UAAJ,EAAgB;AACd,YAAMG,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEJ,UADU;AAEdL,QAAAA;AAFc,OAAhB;AAIAF,MAAAA,KAAK,CAACN,yBAAN,CAAgCgB,OAAhC;AACD;AACF,GAXD;;AAaAtB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,cAAc;AACf,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,4BAEE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAQD,CA1BD;;AA4BA,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACtCnB,EAAAA,yBAAyB,EAAEgB,OAAO,IAChCG,QAAQ,CAACnB,yBAAyB,CAACgB,OAAD,CAA1B;AAF4B,CAAL,CAAnC;;AAKA,eAAelB,OAAO,CACpB,IADoB,EAEpBoB,kBAFoB,CAAP,CAGbnB,UAAU,CAACM,YAAD,CAHG,CAAf;AAKAA,YAAY,CAACe,SAAb,GAAyB;AACvBC,EAAAA,MAAM,EAAE1B,SAAS,CAAC2B,MADK;AAEvBT,EAAAA,UAAU,EAAElB,SAAS,CAAC4B,MAFC;AAGvBC,EAAAA,0BAA0B,EAAE7B,SAAS,CAAC4B,MAHf;AAIvBvB,EAAAA,yBAAyB,EAAEL,SAAS,CAAC8B;AAJd,CAAzB","sourcesContent":["import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport NextSeo from \"next-seo\";\nimport QueryString from \"query-string\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"next/router\";\nimport { retrieveCertificateByLink } from \"../src/reducers/certificate\";\nimport NavigationBar from \"../src/components/Layout/NavigationBar\";\nimport FooterBar from \"../src/components/Layout/FooterBar\";\nimport MainPageContainer from \"../src/components/MainPageContainer\";\nimport { DEFAULT_SEO } from \"../src/config\";\n\nconst VerifierPage = props => {\n  const getCertificate = () => {\n    const encryptionKey = window.location.hash.substring(1);\n    // using window.location.search because react router has issue getting the query on NextJS\n    const documentId = QueryString.parse(window.location.search).documentId;\n    if (documentId) {\n      const payload = {\n        id: documentId,\n        encryptionKey\n      };\n      props.retrieveCertificateByLink(payload);\n    }\n  };\n\n  useEffect(() => {\n    getCertificate();\n  }, []);\n\n  return (\n    <>\n      {/* <NextSeo config={DEFAULT_SEO} /> */}\n      <NavigationBar active=\"home\" />\n      <MainPageContainer />\n      {/* <FooterBar /> */}\n    </>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  retrieveCertificateByLink: payload =>\n    dispatch(retrieveCertificateByLink(payload))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(withRouter(VerifierPage));\n\nVerifierPage.propTypes = {\n  router: PropTypes.object,\n  documentId: PropTypes.string,\n  encryptedCertificateStatus: PropTypes.string,\n  retrieveCertificateByLink: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}